C4Deployment
    title Copper Print Gallery System - Deployment Diagram (Updated DNS and Auth0)

    Deployment_Node(heroku, "Heroku", "Cloud Platform") {
        Deployment_Node(public_web_dyno, "Public Web Dyno", "Heroku Web Dyno") {
            Container(web_app, "Web Application", "React", "Serves the public-facing gallery website for anonymous viewing")
        }
        Deployment_Node(artist_web_dyno, "Artist Web Dyno", "Heroku Web Dyno") {
            Container(artist_web_app, "Artist Web Application", "React", "Provides secure interface for artist to manage content")
        }
    }

    Deployment_Node(auth0, "Auth0", "Identity as a Service") {
        Container(auth0_service, "Auth0", "Authentication Service", "Handles artist authentication and authorization")
    }


    Deployment_Node(aws, "Amazon Web Services (AWS)", "Cloud") {
        Deployment_Node(route53, "Amazon Route 53", "DNS Service") {
            Container(dns_records, "DNS Records", "A, CNAME, ALIAS", "api.copperprintgallery.com, www.copperprintgallery.com, artist.copperprintgallery.com")
        }

        Deployment_Node(api_gateway, "Amazon API Gateway", "API Management") {
            Container(aws_api_gateway, "API Gateway", "RESTful API", "Routes requests to appropriate Lambda functions")
        }

        Deployment_Node(lambda, "AWS Lambda", "Serverless Compute") {
            Container(content_service, "Content Management Service", "Node.js", "Manages artwork metadata and coordinates image processing")
            Container(search_service, "Search Service", "Node.js", "Provides full-text search capabilities")
            Container(image_service, "Image Processing Service", "Python", "Handles image processing, optimization, and storage")
        }

        Deployment_Node(s3, "Amazon S3", "Object Storage") {
            Container(file_storage, "File Storage", "S3 Bucket", "Stores processed images")
            Container(temp_storage, "Temporary Storage", "S3 Bucket", "Temporarily stores original images during processing")
        }

        Deployment_Node(cloudfront, "Amazon CloudFront", "CDN") {
            Container(cdn, "Content Delivery Network", "CloudFront Distribution", "Serves optimized images and static assets")
        }

        Deployment_Node(rds, "Amazon RDS", "Managed Relational Database Service") {
            ContainerDb(database, "PostgreSQL Database", "PostgreSQL 13", "Stores user data, artwork metadata, and gallery structure")
        }

        Deployment_Node(cloudwatch, "Amazon CloudWatch", "Monitoring and Logging") {
            Container(logs, "CloudWatch Logs", "Centralized Logging", "Aggregates logs from all AWS services")
            Container(metrics, "CloudWatch Metrics", "Monitoring", "Collects and tracks metrics from AWS services")
        }
    }

    Rel(dns_records, aws_api_gateway, "Routes API requests to", "DNS")
    Rel(dns_records, web_app, "Routes public web requests to", "DNS")
    Rel(dns_records, artist_web_app, "Routes artist web requests to", "DNS")

    Rel(web_app, aws_api_gateway, "Makes API calls", "HTTPS")
    Rel(artist_web_app, aws_api_gateway, "Makes API calls", "HTTPS")
    Rel(web_app, cdn, "Loads assets from", "HTTPS")
    Rel(artist_web_app, cdn, "Loads assets from", "HTTPS")

    Rel(aws_api_gateway, content_service, "Invokes", "HTTPS")
    Rel(aws_api_gateway, search_service, "Invokes", "HTTPS")
    Rel(aws_api_gateway, image_service, "Invokes", "HTTPS")

    Rel(content_service, database, "Reads from and writes to", "SSL/TLS")
    Rel(search_service, database, "Reads from", "SSL/TLS")
    Rel(image_service, temp_storage, "Reads original images", "HTTPS")
    Rel(image_service, file_storage, "Stores processed images", "HTTPS")

    Rel(cdn, file_storage, "Retrieves assets from", "HTTPS")

    Rel(aws_api_gateway, auth0_service, "Validates tokens with", "HTTPS")
    Rel(artist_web_app, auth0_service, "Authenticates via", "HTTPS")

    Rel(content_service, logs, "Sends logs to", "AWS Internal")
    Rel(search_service, logs, "Sends logs to", "AWS Internal")
    Rel(image_service, logs, "Sends logs to", "AWS Internal")
    Rel(aws_api_gateway, logs, "Sends logs to", "AWS Internal")

    Rel(content_service, metrics, "Sends metrics to", "AWS Internal")
    Rel(search_service, metrics, "Sends metrics to", "AWS Internal")
    Rel(image_service, metrics, "Sends metrics to", "AWS Internal")
    Rel(aws_api_gateway, metrics, "Sends metrics to", "AWS Internal")

    UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="2")